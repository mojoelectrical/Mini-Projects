/* Detect Different objects and label them*/
pic=imread(image);

pic_g=rgb2gray(pic);

medfilt_pic_g=medfilt2(pic_g,[3,3]); %%median filter 

th=120;         %%threshold value
bound=11;

pic_digital=medfilt_pic_g(125:400,1:600);
l=size(pic_digital,2);
h=size(pic_digital,1);

for i=1:h
    for j=1:l
        if (pic_digital(i,j)<th)
            pic_digital(i,j)=0;
        else
            pic_digital(i,j)=1;
        end
    end
end


%%detecting objects

pic_digital_obj=pic_digital;

for i=bound:h-bound
    for j=bound:l-bound
        if (pic_digital(i,j)==0&&(~pic_digital(i-1,j-1)||~pic_digital(i-1,j)||...
                ~pic_digital(i-1,j+1)||~pic_digital(i,j-1)||~pic_digital(i,j+1)...
                ||~pic_digital(i+1,j-1)||~pic_digital(i+1,j)||~pic_digital(i+1,j+1)))
            pic_digital_obj(i,j)=2; 
        end
    end
end

%%detect parts and connect pixels of the same object
pic_parts=pic_digital_obj;

objno=2;

for i=bound:h-bound
    for j=bound:l-bound

        if (pic_parts(i,j)==2)
            objno=objno+1;
            pic_parts(i,j)=objno;
            for k=i:h-bound
                for m=j:l-bound
                    f=0;
                    for o=k-5:k+5
                        for p=m-5:m+5
                            if (pic_parts(o,p)==objno)
                                f=1;
                            end
                        end
                    end

                    if (pic_digital_obj(k,m)==2&&f)
                         pic_parts(k,m)=objno;
                    end
                end
                for m1=bound:j
                    f=0;
                    for o=k-5:k+5
                        for p=j-m1+bound-5:j-m1+bound+5
                            if (pic_parts(o,p)==objno)
                                f=1;
                            end
                        end
                    end
                    if ((pic_digital_obj(k,j-m1+bound)==2)&&f)
                        pic_parts(k,j-m1+bound)=objno;
                    end
                end
            end
        end
    end
end

/*Objects split into different frames and labeled as targets or objects */
f=1;
objects=struct('objNo',2);
for st=3:objno
    [a b]=find(pic_parts==st);
    d=size(find(pic_parts==st),1);
    if (d>300)                           %% no pixels to be detected as object
        objects(f).objNo=f;
        objects(f).pix=[a,b];
        objects(f).pixSize=d;
        f=f+1;
    end
end

NoObjects=size(objects,2);

for i=1:NoObjects
    a=objects(i).pix;
    min_r=min(a(:,1));
    max_r=max(a(:,1));
    min_c=min(a(:,2));
    max_c=max(a(:,2));
    objects(i).frame=pic_parts(min_r-5:max_r+5,min_c-5:max_c+5);
 
    g=round((max_r-min_r)/2);
    b=size(objects(i).frame,2);
    sw=0;
    for j=1:b-1
        if (objects(i).frame(g,j)~=objects(i).frame(g,j+1))
            sw=1+sw;
        end
        objects(i).switches=sw;
        if (objects(i).switches==2)
            objects(i).type='full';
        else
            objects(i).type='target';

        end
    end
end


/* Find the center of objects and label the marker */for i=1:size(objects,2)
    pixel=objects(i).pix;
    xc=round(sum(pixel(:,1))/size(pixel,1));
    yc=round(sum(pixel(:,2))/size(pixel,1));
    objects(i).center=[xc,yc];
    f=0;
    for j=1:size(pixel,1)
        if (pixel(j,:)==objects(i).center)
            f=1;
        end
    end
    if (strcmp(objects(i).type,'full')&&~f)
        objects(i).form='marker';
    end
end

/* Save an array with edges of each object */
for c=1:size(objects,2)
    k=1;
    pixel=objects(c).pix;
    for i=1:size(pixel,1)
        h=0;
        if (~ismember((pixel(i,:)+[-1 -1]), pixel,'rows')||~ismember((pixel(i,:)+[-1 0]), pixel,'rows')||...
            ~ismember((pixel(i,:)+[-1 1]), pixel,'rows')||~ismember((pixel(i,:)+[0 -1]), pixel,'rows')||...
            ~ismember((pixel(i,:)+[0 1]), pixel,'rows')||~ismember((pixel(i,:)+[1 -1]), pixel,'rows')||...
            ~ismember((pixel(i,:)+[1 0]), pixel,'rows')||~ismember((pixel(i,:)+[1 1]), pixel,'rows'))
            h=1;
        else
            h=0;
        end
        if (h)
             objects(c).edge(k,:)=objects(c).pix(i,:);
             k=k+1;
        end
    end
end

/* Save distance from center to edges and label circles */
or i=1:size(objects,2)
    dist=zeros(size(objects(i).edge,1),1);
    for f=1:size(objects(i).edge,1)
        dist(f)= (  (objects(i).center(1)-objects(i).edge(f,1))^2+(objects(i).center(2)-objects(i).edge(f,2))^2    )^0.5;
    end
    objects(i).dist=dist;
    if ((max(dist)-min(dist))<5)
        objects(i).form='circle';
    else 
        if (~strcmp(objects(i).form,'marker'))
            objects(i).form='XXX';
        end
    end
end

    %%find corners
for c=1:size(objects,2)
    temp=objects(c).dist;
    for i=1:4
        [maxdist cornerNo]=max(temp);
        corner(i,:)=objects(c).edge(cornerNo,:);
        temp(cornerNo)=0;
        for k=1:15
            for l=1:15
                f=ismember(objects(c).edge,objects(c).edge(cornerNo,:)+[k-8 l-8],'rows');
                no=find(f==1);
                if (no~=0)
                    temp(no)=0;
                end
            end
        end
    end
    objects(c).corner=corner;
end

/* Label squares, rectangles and find orientation angles */
for i=1:size(objects,2)
    corner=objects(i).corner;
    objects(i).cornerDist(1)=((corner(1,1)-corner(2,1))^2+(corner(1,2)-corner(2,2))^2)^0.5;
    objects(i).cornerDist(2)=((corner(1,1)-corner(3,1))^2+(corner(1,2)-corner(3,2))^2)^0.5;
    objects(i).cornerDist(3)=((corner(1,1)-corner(4,1))^2+(corner(1,2)-corner(4,2))^2)^0.5;
    objects(i).cornerDist(4)=((corner(2,1)-corner(3,1))^2+(corner(2,2)-corner(3,2))^2)^0.5;
    objects(i).cornerDist(5)=((corner(2,1)-corner(4,1))^2+(corner(2,2)-corner(4,2))^2)^0.5;
    objects(i).cornerDist(6)=((corner(3,1)-corner(4,1))^2+(corner(3,2)-corner(4,2))^2)^0.5;

    if((objects(i).cornerDist(1)<15||objects(i).cornerDist(2)<15||...
        objects(i).cornerDist(3)<15||objects(i).cornerDist(4)<15||...
        objects(i).cornerDist(5)<15||objects(i).cornerDist(6)<15)&&~strcmp(objects(i).form,'circle')&&~strcmp(objects(i).form,'marker'))
        objects(i).form='triangle';
    else
        if (~strcmp(objects(i).form,'circle')&&~strcmp(objects(i).form,'marker'))
            objects(i).form='quader';
        end
        temp=objects(i).cornerDist;
        d=zeros(1,2);
        edgeLength=zeros(4,1);
        objects(i).lines=zeros(4,2);
        for m=1:4 
            [a,b]=min(temp);
            
            edgeLength(m)=a;
            
            switch b
             case 1 
                 d=polyfit([corner(1,2),corner(2,2)],[corner(1,1),corner(2,1)],1);
             case 2 
                 d=polyfit([corner(1,2),corner(3,2)],[corner(1,1),corner(3,1)],1);
             case 3 
                 d=polyfit([corner(1,2),corner(4,2)],[corner(1,1),corner(4,1)],1);
             case 4 
                 d=polyfit([corner(2,2),corner(3,2)],[corner(2,1),corner(3,1)],1);
             case 5 
                 d=polyfit([corner(2,2),corner(4,2)],[corner(2,1),corner(4,1)],1);
             case 6 
                d=polyfit([corner(3,2),corner(4,2)],[corner(3,1),corner(4,1)],1);
            end
            temp(b)=100000;
            objects(i).lines(m,:)=d;
            objects(i).edgeLength=edgeLength;
        end
        objects(i).edgeLength=edgeLength;
        p=max(edgeLength)-min(edgeLength);
        if (strcmp(objects(i).form,'quader')&&p<10)
            objects(i).form='cube';
        end

    end   
end

for i=1:size(objects,2)
    if (strcmp(objects(i).form, 'triangle')&&strcmp(objects(i).type,'target'))
        dist=objects(i).dist;
        q=max(dist);
        no=size(objects(i).dist,1);
        counter=0;
        for k=1:no 
            if (dist(k)>q-4)
                counter=counter+1;
            end
        end
        if (counter>no/2)
            objects(i).form='circle'; 
        end
    end
end    






for i=1:size(objects,2)
    
    
    if(strcmp(objects(i).form,'triangle'))
    if (size(objects(i).frame,1)>60||size(objects(i).frame,2)>60)
    objects(i).form='quader';
    end
    end
    

    
        [maxL maxNo]=max(objects(i).edgeLength);
   if (~isempty(maxL))

    if ((maxL>40)&&(~strcmp(objects(i).form,'marker')))        %%Lenggth of Rectangle
        objects(i).form='quader';
    end
    if (strcmp(objects(i).form,'quader')||strcmp(objects(i).form,'cube'))
    objects(i).angle=atan2(objects(i).lines(maxNo,1),1)*180/pi;
    end
   end
end

/* transform A matrices from being with respect to marker to with respect to robot */
scale=50/68;
a_1=min(objects(1).edge(:,1));    %%10;
b_1=min(objects(1).edge(:,2));    %%120;
Q_rm=[-1 0 0 285;
       0 -1 0 135;
       0 0 1 0;
       0 0 0 1];
   
for i=2:size(objects,2)
    
%     if(~strcmp(objects(i).form,'cube')&&~strcmp(objects(i).form,'quader'))
    
    objects(i).A=Q_rm*[1 0 0 scale*(objects(i).center(1)-a_1);
                       0 -1 0 scale*(objects(i).center(2)-b_1);
                       0 0 -1 10;
                       0 0 0 1];

%     else
%         ang=(objects(i).angle-90)*pi/180;
%     objects(i).A=Q_rm*[sin(ang) cos(ang) 0 scale*(objects(i).center(1)-a_1);
%                        -cos(ang) sin(ang) 0 scale*(objects(i).center(2)-b_1);
%                        0 0 -1 10;
%                        0 0 0 1];
%     end

end

/* Obtain joint values for each angle */
%Works for:
%-60<=theta1>=60
%-60<=theta2>=60
%-90<=thetaB>=90
%-90<=theta5>=90

l1=95; 
l2=100; 
l3=60; 
l4=0; 
l5=0;
d1=155;
d2=0;
d3=0;
d4=0;
d5=110;
alpha1=0;alpha2=pi/2;alpha3=0;alpha4=pi/2;alpha5=0;

if (abs(A(1,1))>0.001&&abs(A(1,2))>0.001&&abs(A(1,3))>0.001&&...
    abs(A(2,1))>0.001&&abs(A(1,2))>0.001&&abs(A(2,3))>0.001&&...               
    abs(A(3,1))>0.001&&abs(A(3,2))>0.001&&abs(A(3,3))>0.001)                   %no element of A is 0
    %% 1 try thetaA: + +, 
    %%       thetaB: + -
    sol=1.1
    thetaA_inv=atan2(A(2,3),A(1,3));
    thetaB_inv=atan2((A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
    theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
    theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
    if(abs(theta3_inv)>pi)
        theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
    end
    theta4_inv=thetaB_inv-pi/2-theta3_inv;
    theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
    if(abs(theta1_inv)>pi)
        theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
    end
    theta2_inv=thetaA_inv-theta1_inv;
    
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
          
%% 2. try thetaA: - -, 
%%        thetaB: + -
        sol=2.1
        thetaA_inv=atan2(-A(2,3),-A(1,3));
        thetaB_inv=atan2((A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    end
        
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
%% 3. try thetaA: + +, 
%%        thetaB: - -
        sol=3.1
        thetaA_inv=atan2(-A(2,3),-A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
            theta4_inv=thetaB_inv-pi/2-theta3_inv;
        if(abs(theta4_inv)>pi)
            theta4_inv=theta4_inv-sign(theta4_inv)*2*pi;
        end
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    end
      
      %%
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
%% 4. try thetaA: - -, 
%%        thetaB: - -
        sol=4.1
        thetaA_inv=atan2(A(2,3),A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv; 
    end
    %%
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
    abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)

%% 5. try thetaA: + +, 
%%        thetaB: - +
        sol=5.1
        thetaA_inv=atan2(A(2,3),A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        if(imag(theta3_inv)~=0)
            theta3_inv=2;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    end
    
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
%% 6. try thetaA: - -, 
%%        thetaB: - +
        sol=6.1
        thetaA_inv=atan2(-A(2,3),-A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        if(imag(theta3_inv)~=0)
            theta3_inv=2;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    
    end


elseif (abs(A(2,3))<0.05&&abs(A(1,3))<0.05)  %A(1,3)=A(2,3)=0, A(3,3) 1 or -1

     if (A(3,3)<0)
        thetaB_inv=0;
     else
        thetaB_inv=pi;
     end
     theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);
         if(abs(theta3_inv)>pi)
        theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
     theta4_inv=thetaB_inv-pi/2-theta3_inv;
     
     a=l2+l3*cos(theta3_inv);
     b=d3+d4;
     c=l1;
     U=2*a*c;
     V=2*b*c;
     W=A(1,4)^2+A(2,4)^2-a^2-b^2-c^2;
     T=V/(U+W)+( (V/(U+W))^2 - (W-U)/(W+U)  )^0.5;
     theta2_inv=atan(T)*2;

      U2=l2+l1*cos(theta2_inv)+l3*cos(theta3_inv);
      V2=d3+d4+l1*sin(theta2_inv);
      W2=A(1,4);
      if ((W2+U2)==0)
         thetaA_inv=-179*pi/180;
         theta1_inv=-89*pi/180;
         theta2_inv=-90*pi/180;
      else
         T2=V2/(U2+W2)+( (V2/(U2+W2))^2 - (W2-U2)/(W2+U2)  )^0.5;
         thetaA_inv=atan(T2)*2;
         theta1_inv=thetaA_inv-theta2_inv;
      end
      check=l2*sin(thetaA_inv)-(d3+d4)*cos(thetaA_inv)+l1*sin(theta1_inv)+d5*sin(thetaA_inv)*sin(thetaB_inv)+l3*sin(thetaA_inv)*cos(theta3_inv);
      if (abs(check-A(2,4))>15)           %y-position discrepancy
         U2=l2+l1*cos(theta2_inv)+l3*cos(theta3_inv);
         V2=d3+d4+l1*sin(theta2_inv);
         W2=A(1,4);
         T2=V2/(U2+W2)-( (V2/(U2+W2))^2 - (W2-U2)/(W2+U2)  )^0.5;
         thetaA_inv=atan(T2)*2;
         theta1_inv=thetaA_inv-theta2_inv;
      end
      if (A(3,3)<0)
         theta5_inv=thetaA_inv-atan2(A(2,1),A(1,1));
      else
         theta5_inv=atan2(-A(2,1),-A(1,1))-thetaA_inv; 
      end
            %% sol 2
      if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
          abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
            a=l2+l3*cos(theta3_inv);
            b=d3+d4;
            c=l1;
            U=2*a*c;
            V=2*b*c;
            W=A(1,4)^2+A(2,4)^2-a^2-b^2-c^2;     
            T=V/(U+W)-( (V/(U+W))^2 - (W-U)/(W+U)  )^0.5;
            theta2_inv=atan(T)*2;
            
            U2=l2+l1*cos(theta2_inv)+l3*cos(theta3_inv);
            V2=d3+d4+l1*sin(theta2_inv);
            W2=A(1,4);
            if ((W2+U2)==0)
               thetaA_inv=-179*pi/180;
               theta1_inv=-89*pi/180;
               theta2_inv=-90*pi/180;
            else
               T2=V2/(U2+W2)+( (V2/(U2+W2))^2 - (W2-U2)/(W2+U2)  )^0.5;
               thetaA_inv=atan(T2)*2;
               theta1_inv=thetaA_inv-theta2_inv;
            end
            check=l2*sin(thetaA_inv)-(d3+d4)*cos(thetaA_inv)+l1*sin(theta1_inv)+d5*sin(thetaA_inv)*sin(thetaB_inv)+l3*sin(thetaA_inv)*cos(theta3_inv);
            if (abs(check-A(2,4))>15)           %y-position discrepancy
                U2=l2+l1*cos(theta2_inv)+l3*cos(theta3_inv);
                V2=d3+d4+l1*sin(theta2_inv);
                W2=A(1,4);
                T2=V2/(U2+W2)-( (V2/(U2+W2))^2 - (W2-U2)/(W2+U2)  )^0.5;
                thetaA_inv=atan(T2)*2;
                theta1_inv=thetaA_inv-theta2_inv;
            end
            if (A(3,3)<0)
                theta5_inv=thetaA_inv-atan2(A(2,1),A(1,1));
            else
                theta5_inv=atan2(-A(2,1),-A(1,1))-thetaA_inv; 
            end
      end
      
else %If some of the other terms is 0
    %% 1 try thetaA: + +, 
    %%       thetaB: + -
    sol=1.2
    thetaA_inv=atan2(A(2,3),A(1,3));
    thetaB_inv=atan2((A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
    theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
    theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
    if(abs(theta3_inv)>pi)
        theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
    end
    theta4_inv=thetaB_inv-pi/2-theta3_inv;
    theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
    if(abs(theta1_inv)>pi)
        theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
    end
    theta2_inv=thetaA_inv-theta1_inv;
    
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
          
%% 2. try thetaA: - -, 
%%        thetaB: + -
        sol=2.2
        thetaA_inv=atan2(-A(2,3),-A(1,3));
        thetaB_inv=atan2((A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    end
        
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
%% 3. try thetaA: + +, 
%%        thetaB: - -
        sol=3.2
        thetaA_inv=atan2(-A(2,3),-A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
            theta4_inv=thetaB_inv-pi/2-theta3_inv;
        if(abs(theta4_inv)>pi)
            theta4_inv=theta4_inv-sign(theta4_inv)*2*pi;
        end
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    end
      
      %%
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
%% 4. try thetaA: - -, 
%%        thetaB: - -
        sol=4.2
        thetaA_inv=atan2(A(2,3),A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,-A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv; 
    end
    %%
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
    abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)

%% 5. try thetaA: + +, 
%%        thetaB: - +
        sol=5.2
        thetaA_inv=atan2(A(2,3),A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        if(imag(theta3_inv)~=0)
            theta3_inv=2;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    end
    
    if (abs(theta1_inv*180/pi)>61||abs(theta2_inv*180/pi)>61||...
        abs(theta3_inv*180/pi)>61||abs(theta4_inv*180/pi)>61)
%% 6. try thetaA: - -, 
%%        thetaB: - +
        sol=6.2
        thetaA_inv=atan2(-A(2,3),-A(1,3));
        thetaB_inv=atan2(-(A(1,3)^2+A(2,3)^2)^0.5,A(3,3));
        theta5_inv=atan2(-A(3,2),A(3,1));       %what if A(3,1) 0?
        theta3_inv=asin((A(3,4)-d1-d2+d5*cos(thetaB_inv))/l3);    %2 solutions
        if(abs(theta3_inv)>pi)
            theta3_inv=theta3_inv-sign(theta3_inv)*2*pi;
        end
        if(imag(theta3_inv)~=0)
            theta3_inv=2;
        end
        theta4_inv=thetaB_inv-pi/2-theta3_inv;
        theta1_inv=atan2(A(2,4)-l2*sin(thetaA_inv)+d4*cos(thetaA_inv)+d3*cos(thetaA_inv)-d5*sin(thetaA_inv)*sin(thetaB_inv)-l3*sin(thetaA_inv)*cos(theta3_inv),A(1,4)-l2*cos(thetaA_inv)-d3*sin(thetaA_inv)-d4*sin(thetaA_inv)-d5*cos(thetaA_inv)*sin(thetaB_inv)-l3*cos(theta3_inv)*cos(thetaA_inv));
        if(abs(theta1_inv)>pi)
            theta1_inv=theta1_inv-sign(theta1_inv)*2*pi;
        end
        theta2_inv=thetaA_inv-theta1_inv;
    
    end
end

if (theta5_inv>pi/2) %Adjust theta5 if it is over 90 or under -90
    theta5_inv=theta5_inv-pi;
elseif (theta5_inv<-pi/2)
    theta5_inv=theta5_inv+pi;
end
    


theta1_inv_deg=round(theta1_inv*180/pi);
theta2_inv_deg=round(theta2_inv*180/pi);
theta3_inv_deg=round(theta3_inv*180/pi);
theta4_inv_deg=round(theta4_inv*180/pi);
theta5_inv_deg=round(theta5_inv*180/pi);


m1=-165/2800;
m2=-9/140;
m3=-9/140;
m4=17/280;
m5=-9/165;
b1=-5;
b2=5;
b3=10;
b4=10;
b5=-20;
theta_1_u=(theta1_inv_deg-b1)/m1;
theta_2_u=(theta2_inv_deg-b2)/m2;
theta_3_u=(theta3_inv_deg-b3)/m3;
theta_4_u=(theta4_inv_deg-b4)/m4;
theta_5_u=(theta5_inv_deg-b5)/m5;

/* Generate text file with picking/dropping commands for Robix */

% fprintf(fid,'%%%%%%%%object %i;\r\n',objectnumb);

fprintf(fid,'move 1 to %i, 2 to %i;\r\n',round(theta_1_u),round(theta_2_u));
fprintf(fid,'move 5 to %i;\r\n',round(theta_5_u));
fprintf(fid,'move 3 to %i, 4 to %i;\r\n',round(theta_3_u),round(theta_4_u));
if pick
    fprintf(fid,'move 6 to %i;\r\n',-250); %%Check value to close gripper
else
    fprintf(fid,'move 6 to %i;\r\n',-1300); %%Check value to open gripper 
end
fprintf(fid,'move 3 to %i, 4 to %i;\r\n',0,0);

/*Integrate */
clc;
clear;
fid=fopen('Robix.txt','w');
fprintf(fid,'move 6 to %i;\r\n',-1300); %%Check value to open gripper
% % Image Processing
    image_pro
%%Check image processing %%ERASE! just to check errors
    figure;
    imagesc(pic_parts);

%%Obtain objects' coordinates with respect to robot
    transform;

%%Pick, move and place objects
    translation2;
    
fclose(fid);

